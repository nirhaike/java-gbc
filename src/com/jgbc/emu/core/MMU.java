/**
Copyright (c) 2016, Nir Haike.
*/
package com.jgbc.emu.core;

/**
 * Memory Interface Emulation
 *  
 * @author Nir Haike
 *
 */
public class MMU {

	public static final int SB = 0xFF01;
	public static final int SC = 0xFF02;
	public static final int DIV = 0xFF04;
	public static final int TIMA = 0xFF05;
	public static final int TMA = 0xFF06;
	public static final int TAC = 0xFF07;
	
	public static final int IF = 0xFF0F; // interrupt flag
	
	public static final int NR10 = 0xFF10; // sound mode 1 register
	public static final int NR11 = 0xFF11;
	public static final int NR12 = 0xFF12;
	public static final int NR13 = 0xFF13;
	public static final int NR14 = 0xFF14;
	public static final int NR21 = 0xFF16;
	public static final int NR22 = 0xFF17;
	public static final int NR23 = 0xFF18;
	public static final int NR24 = 0xFF19;
	public static final int NR30 = 0xFF1A;
	public static final int NR31 = 0xFF1B;
	public static final int NR32 = 0xFF1C;
	public static final int NR33 = 0xFF1D;
	public static final int NR34 = 0xFF1E;
	public static final int NR41 = 0xFF20;
	public static final int NR42 = 0xFF21;
	public static final int NR43 = 0xFF22;
	public static final int NR44 = 0xFF23;
	public static final int NR50 = 0xFF24;
	public static final int NR51 = 0xFF25;
	public static final int NR52 = 0xFF26; // all sound on/off
	public static final int[] WAVE = new int[]{0xFF30, 0xFF3F}; // wave pattern ram
	
	public static final int LCDC = 0xFF40;
	public static final int STAT = 0xFF41;
	public static final int SCY = 0xFF42;
	public static final int SCX = 0xFF43;
	public static final int LY = 0xFF44;
	public static final int LYC = 0xFF45;
	public static final int DMA = 0xFF46;
	public static final int BGP = 0xFF47;
	public static final int OBP0 = 0xFF48;
	public static final int OBP1 = 0xFF49;
	public static final int WY = 0xFF4A;
	public static final int WX = 0xFF4B;
	public static final int IE = 0xFFFF; // interrupt enable flag
	
	
	private Cartridge cart;
	private Z80 core;
	
	private int[] workingRam;
	private int[] externalRam;
	private int[] zeroPageRam;
	private int[] bios;
	
	private boolean inBios;
	
	public MMU() {
		// TODO
	}
	
	public void initialize() {
		// TODO complete this
		inBios = true;
		workingRam = new int[0x2000]; // 8k
		externalRam = new int[0x2000]; // 8k
		zeroPageRam = new int[0x80];
		// bios size: 0x100
		bios = new int[] {
			0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
			0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
			0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
			0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
			0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
			0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
			0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
			0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
			0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xF2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
			0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
			0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
			0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
			0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
			0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x4C,
			0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,
			0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50
		};
		
	}
	
	public void setCartridge(Cartridge cart) {
		this.cart = cart;
	}
	
	public void setCore(Z80 core) {
		this.core = core;
	}
	
	public int readByte(int address) {
		switch (address & 0xF000) {
		// bios
		case 0x0000:
			if (inBios) {
				if (address < 0x100) {
					return bios[address] & 0xff;
				} else if (this.core.getPC() == 0x100) {
					inBios = false;
				}
			}
			return cart.readRom(address);
		// rom0
		case 0x1000:
		case 0x2000:
		case 0x3000:
			return cart.readRom(address);
		// rom1 (unbanked)
		case 0x4000:
		case 0x5000:
		case 0x6000:
		case 0x7000:
			// TODO test this
			return cart.readRom(cart.getRomOffset() + (address & 0x3FFF));
		// vram (graphics)
		case 0x8000:
		case 0x9000:
			break;
		// external ram
		case 0xA000:
		case 0xB000:
			break;
		// working ram
		case 0xC000:
		case 0xD000:
		// working ram shadow
		case 0xE000:
			break;
		// working ram shadow, I/O, zero-page ram
		case 0xf000:
			break;
		}
		return 0;
	}
	
	public void writeByte(int address, int value) {
		// TODO
	}

}
